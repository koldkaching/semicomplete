<article>
	<head>
		<title>ARP Security</title>
		<caption>ARP-related security issues</caption>
	</head>
	<body>
		<topic title="Preface">
			During a bit of boredom, I found that I could knock my friend's Mac
			laptop offline by assuming it's IP address. After some quick research,
			I found that I could convince another machine that "I" was using it's
			IP address, and it would happily panic and try and attempt to get a
			new address with dhcp. I thought to myself, "It can't be this easy to
			DoS someone on a local network."
			<p/>

			In any case, much of this article is probably common knowledge in the
			security community, but it was new to me as I was discovering it; so
			here it is.
		</topic>

		<topic title="ARP, IPs, and You">
			My first hunch for why this works was to blame the network hardware
			(switches, etc). Turns out I was wrong. Let's start from the beginning!
			<p/>
			So, I start off by assuming someone else's ip address:
			<pre>ifconfig rl0 inet 192.168.15.1</pre>

			What happens when I do that? Watching tcpdump in another window:
			<pre>17:25:40.216489 00:50:ba:15:19:0d > Broadcast, ethertype ARP (0x0806), length 60: arp who-has 192.168.15.1 tell 192.168.15.1</pre>

			Can't decipher tcpdump output? That's ok. When I set my IP to
			'192.168.15.1' my operating system sends out an arp "who-has" packet
			seeing if anyone else has this IP. So why is this important?

			<p/>

			When <i>any</i> computer on the network recieves this kind of packet,
			it puts an entry in a table called the ARP table. The ARP table maps IP
			addresses to MAC addresses. This kind of packet is a broadcast arp
			packet that has the same "who-has" IP address as "tell" IP address. The
			problem with very dynamic networks is that the likelyhood of anything
			on the network having any static (permanent) arp entries is very low.
			Translation: You can poison hosts and network devices with little
			effort.

			<p/>

			How can we make the process of poisoning easier? We can use <a
			href="http://nemesis.sourceforge.net">nemesis</a>, a packet injection
			tool, to help us out. Instead of using OS tools to set our IP, we can
			use nemesis to poison networked devices.

		</topic>

		<topic title="Nemesis for Arp Poisoning">
			Remember that packet that we sent out when we changed our IP? Well we
			can spoof it with nemesis.

			<pre>
nemesis arp -S 192.168.100.100 -D 192.168.100.100 \ 
            -H 00:de:ad:be:ef:00 -h 01:de:ad:be:ef:00</pre>

			This will broadcast an arp "who-has" packet on the network and pretty
			much every machine will happily update their arp tables with your new
			entry for the ip <i>192.168.100.100</i> and the mac address of
			<i>00:de:ad:be:ef:00</i>.

			<p/>

			So let's put this to use on an existing host on our network:
			<pre>
kenya% arp 192.168.100.100 
? (192.168.100.100) at 00:0c:f1:2e:2b:95 on tl0 [ethernet]
... meanwhile, I'm being evil ...
whack% sudo nemesis arp -S 192.168.100.100 -D 192.168.100.100 \ 
            -H 00:de:ad:be:ef:00 -h 00:de:ad:be:ef:00
... and back on the other machine ...
kenya% arp 192.168.100.100
? (192.168.100.100) at 00:de:ad:be:ef:00 on tl0 [ethernet] </pre>

		Note how the mac addresses are different after I poison the network. This
		technique is wonderfully simple. Most (all?) machines and network devices
		on the network should now be convinced that <i>00:de:ad:be:ef:00</i> is
		the proper mac address for the ip <i>192.168.100.100</i>

		<p/>
		Now that we've poisoned the network, we can sniff traffic and see that
		packets that were intended on the "real" <i>192.168.100.100</i> are now
		coming to us becuase the switches know that <i>00:de:ad:be:ef:00</i> is
		us. The added benefit, is that our real mac address is not
		<i>00:de:ad:be:ef:00</i>. Audits logs will not track us easily, especially
		on large-user networks with several unmanaged switches.
		</topic>

		<topic title="Attack: Local DoS">
			If your network uses dhcp with dynamic dns, you can very easily track
			someone and keep them from gaining network access if you are on the
			same network segment (wireless networks, anyone?). This simple
			scriptlet will keep a particular host offline as long as it's running:
			<pre>while true; do 
	nemesis arp -S poorsap -D poorsap \ 
		-H 00:de:ad:be:ef:00 -h 00:de:ad:be:ef:00
	sleep 1
done</pre>
			Once a second, I'll claim I am <i>poorsap</i>. Every time this person
			does dhcp and it updates dns, nemesis will look up the hostname and
			send out the packet on the network claiming that another machine is
			actually <i>poorsap</i>. No one will send packets to the real
			<i>poorsap</i> because they think it's mac address is elsewhere.
			Furthermore, if the OS panics and does a dhcp release/renew sequence,
			the dns entry will update and it'll kick it off a new IP address, if
			any. This has other benefits i'll mention in the next section
		</topic>

		<topic title="Attack: Man in the Middle">
			There are two flavors of this kind of attack: Local and Remote. I don't
			want to get in a religious war with security pedants about semantics,
			but for this situation, <i>local</i> means the local network segment
			(layer 2), and <i>remote</i> means outside the local network.

			<p/>

			There are two styles of each attack: The first being where you
			broadcast arp changes to the local net to convince everyone on the
			local segment that there is a new mac address for a given IP. The
			second is where you convince only an individual host that a mac address
			has changed for a given IP.

			<p/>

			The first attack, local, is where you convince a network or a host that
			you are someone else on the local segment. Traffic intended for the
			target host will go to you. 
			
			<p/>
			
			The second attack, remote, is where you convince a network or a host
			that you are the gateway. Traffic intended for outbound delivery will
			try to go through you. Feel free to sniff their outbound traffic such
			as authentication, aim conversations, etc. More on this later

			<p/>

			You get the idea, arp poisoning is <i>pathetically</i> easy to do on
			normal host machines. And on dynamic networks, it's very likely that
			local-segment routers will have to listen to arp updates.

		</topic>

		<topic title="Simple MITM with NAT">
			I'm lazy. I'll be the first to admit it. So in lazy efforts, I wrote a
			script to automate the task of poisoning hosts and routers. You can 
			<a href="http://www.csh.rit.edu/~psionic/articles/arp-security/arpmitm.sh">grab it here</a>.

		</topic>
	</body>
</article>
