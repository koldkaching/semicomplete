== Data Storage
Database for storing key+timestamp => value pairs

Timestamps are stored as ((1<<63) - timestamp_in_micros) so iteration is in
stack ordering (FILO)

== Data Manipulation:
commandline tool to add data

== Aggregates "create aggregate" Aggregate data and store the computed results in the database.

  Aggregation rules:
    formula => output_row

  When to compute rules?
    1) On collection?
    2) Periodically?

    ???

*** Must implement locking.

  write (row, value, timestamp) 
  if rule on row:
    convert timestamp to (start, end) based on rule
    store evaluation request:
      (rule, start, end, hitcount)

Rules are Triggers that have a callback of Notify.
Triggers:
  db.AddTrigger(row, operation, callback)

???
Triggers are filters, so we can modify data inbound/outbound?
  store (Set, Delete)
  retrieve (Get)

Split fancydb.Set() and rule evaluation? Done.

RATE rule:
  (val[n-1] - val[n]) / (time[n-1] - time[n])

  Assuming it's a counter, and we want the rate across the entire data set:
  (val[0] - val[-1]) / (time[0] - time[-1])


---------------

C?

'key' is a variable name + optional tags
'value' is anything, probably a number

3 types: double, int/long, string

Key format:
<variable><tags>

variable = <string>
tag = <string_tag_name><tag_value>

Loosely, something like tcp packets sent:

variable: tcp_packets_out
tags: machine=teabag,interface=em0

tag values can be any of the types
value can be any type

