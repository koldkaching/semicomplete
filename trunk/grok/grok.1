.Dd February 21, 2006
.Dt LOGWATCH 1
.Os
.Sh NAME
.Nm logwatch
.Nd An expert system for real-time log analysis
.Sh SYNOPSIS
.Nm
.Fl b 
.Nm
.Fl d
.Op Ar 1, 2, ...
.Nm
.Fl f Ar file 
.Sh DESCRIPTION
The
.Nm
utility watches files (or STDOUT) as specified in the configuration file
for patterns.  Upon recognition of a pattern a pre-configured action is
taken.
.Pp
The options are as follows:
.Bl -tag -width indent
.It Fl b
Run in the background.  Detaches logwatch and redirects STDOUT, STDIN,
and STDERR to
.Pa /dev/null
.It Fl d Ar [1, 2, ...]
The value (default is 1 if no value is given) specifies the debug level.
Only messages with a debug value less than or equal to the specified
value will be printed.  A debug value of 2 or higher will output
information about the patterns, file, and exec definitions.
.It Fl f Ar file 
Use
.Ar file
as a configuration file.  If this is not specified
.Nm
will look in the current working directory for
.Pa logwatch.conf
and use that.
.El
.Sh CONFIGURATION 
The
.Pa logwatch.conf
file follows this syntax:
.Bd -literal -offset "indent"
patterns { patternspec };
file "filename" { filespec };
exec "command" { filespec };
.Ed
.Pp
.ft B
patternspec
.ft P
.Bd -literal -offset "indent"
Pattern specifiers determine what to match and capture.  These
patterns can be referred to as %PATTERNNAME% elsewhere in the
configuration file.  Patterns can contain other patterns and have
the following syntax:

PATTERNNAME = "regexp";

Pre-existing named patterns exist for those who do not know regular
expressions.  The pre-existing patterns can be used as %NAME%.  The
patterns are defined as:
.Bl -column ".Sy USERNAME" ".Sy Regular Expression" 
.It Sy "Name" Ta Sy "Regular Expression"

.It Li USERNAME Ta \ew\&+
.It Li USER Ta \ew\&+
.It Li IP Ta $RE{net}{IPv4}
.It Li PORT Ta \ed\&+
.It Li COUNT Ta \ed\&+
.El

It is sometimes desirable to use multiple pre-existing named patterns in
a single match line.  This is accomplished by using subnames.  The
syntax for this is %NAME:SUBNAME%.  This allows you to distinguish from
multiple %NAME% values on a single match line.  See the EXAMPLES section
for a detailed explanation.
.Ed
.Pp
.ft B
filespec
.ft P
.Bd -literal -offset "indent"
File specifiers have the following syntax:

type "description" {
    match = "match pattern";
    key = "some string";
    threshold = "integer";
    interval = "integer";
    reaction = "reaction command(s)";
    reaction = { reaction perl block };
};

.Bl -column ".Sy Description"
.It Em Description Ta A string used to identify the definition.  This has no significance other than debugging and clarification for the user.

.It Em Match Ta The string pattern to match.  Multiple match entries per type definition and named patterns are allowed.

.It Em Key Ta The key to use in the hashtable when counting occourances of a specific event.  The default key is a concatenation of all captured patterns into a string.  As this may not be desirable the key value can be specified.  Pattern names are valid and evaluated at runtime.

.It Em Threshold Ta Specify the number of matches by it's key before the reaction(s) take place.  Once the threshold is reached the reaction(s) occour and the occurance count is set to zero.  The default threshold is 1 (each occurance causes a reaction).

.It Em Interval Ta The time, in seconds, between occurance counter reset.  If the threshold is not reached by the specified interval time then the occourance count is is reset and no reaction is triggered.

.It Em Reaction Ta Any valid (string of) command(s) or block of perl code.  If using a perl block helper variables are provided by logwatch.  These are $v (a hashref containing all named patterns matched, subnames are valid here) and $d (a hashref to use for your own storage, keyed with your key value).
.El

Two special variables are provided for use in the reaction.  These are:
.Bl -column ".Sy %=MATCH%"
.It Em %=MATCH% Ta Contains the substring matched by the
.Ql match
properties.

.It Em %=LINE% Ta Contains the whole line matched.
.El

There are also special options for variables in the reaction statements.
The syntax for these options is %NAME|OPTION%.  Available options are:
.Bl -column ".Sy e[XYZ]"
.It Em shnq Ta Used to escape characters in unquoted strings.

.It Em shdq Ta Used to escape characters in double quoted strings.

.It Em e[XYZ] Ta Used to escape arbitrary characters.
.El

The characters that are escaped are: (){}[]$*?!|;'"
.Ed
.Pp
.Sh FILES
.Pa /usr/local/etc/logwatch.conf
.Pp
.Sh EXAMPLES 
The following example defines %TTY%, watches
.Pa /var/log/messages
for failed su(1) attempts and prints a message to STDOUT (notice the use
of named pattern captures).
.Bd -literal -offset "indent"
patterns {
    TTY = "/dev/tty[qp][a-z0-9]";
};

file "/var/log/messages" {
    type "failed su(1) attempt" {
        match = "BAD SU %USER:FROM% to %USER:TO% on %TTY%";
        reaction = "echo 'Failed su(1): %USER:FROM% -> %USER:TO% (%TTY%)'";
    };
};
.Ed
.Pp
Below is a rule for watching failed SSH login attempts and blocking
them using PF.  Notice the multiple type entries for a single file.
.Bd -literal -offset "indent"
file "/var/log/auth.log" {
    type "ssh-illegal-user" {
        match = "Illegal user %USERNAME% from %IP%";
        threshold = 10;   # 10 hits ...
        key = "%IP%";     # from a single ip ...
        interval = 600;   # in 10 minutes
        reaction = "pfctl -t naughty -T add %IP%";
    };

    type "ssh-scan-possible" {
        match = "Did not receive identification string from %IP%";
        threshold = 3;
        interval = 60;
        reaction = "pfctl -t naughty -T add %IP%";
    };
};
.Ed
.Pp
The following is an example of watching tcpdump output for SYN packets
destined to port 22 and printing a message.  The second type statement
is useful for watching portscans.
.Bd -literal -offset "indent"
exec "tcpdump -li em0 -n 2< /dev/null" {
    type "ssh-connect" {
        match = "%IP:SRC%.\ed+ < %IP:DST%.22: S";
        reaction = "echo 'SSH connect(): %IP:SRC% -< %IP:DST%'";
    };

    type "port-scan" {
        match = "%IP:SRC%.%PORT% < %IP:DST%.%PORT:DST%: S";
        key = "%IP:SRC%";
        threshold = 30;
        interval = 5; 
        reaction = "echo 'Port scan from %IP:SRC%'";
    };
};
.Ed
.Pp
The following example illustrates the optional flags available when
evaluating a variable in a reaction statement.  Assume that
.Pa /etc/passwd
contains the following line:
.Pp
test:*:1002:1002:T"est?:/home/test:/bin/sh
.Bd -literal -offset "indent"
exec "cat /etc/passwd" {
    type "passwd" {
        match = "^test";
        reaction = "echo 'Found: %=LINE|shdq%'";
    };
};
.Ed
.Pp
The output of this is:
.Pp
Found: test:*:1002:1002:T\\"est?:/home/test:/bin/sh
.Pp
Using the same line in
.Pa /etc/passwd
but changing the example to look like:
.Pp
.Bd -literal -offset "indent"
exec "cat /etc/passwd" {
    type "passwd" {
        match = "^test";
        reaction = "echo 'Found: %=LINE|shnq%'";
    };
};
.Ed
.Pp
results in:
.Pp
Found: test:\\*:1002:1002:T\\"est\\?:/home/test:/bin/sh
.Pp
.Sh AUTHOR
.An -nosplit
.An "Jordan Sissel"
.Aq jls@csh.rit.edu
wrote and maintains
.Nm .
.An "Wesley Shields"
.Aq wxs@csh.rit.edu
wrote the manual page.
.Sh BUGS
There are no known bugs at this time.  Bugs can be reported to
.An jls@csh.rit.edu .
