#!/usr/bin/perl
#(~/projects/logwatch) % ./lwrecord -f testing "hello  once uppon" "`date`"

use strict;
use warnings;

use Getopt::Std;
use Data::Dumper;
#use DB_File;
use Storable qw(store lock_store freeze thaw retrieve);

# Handle storing whatever we want?
# It's hard to say how we can store "whatever"
#
# Store items by time.
# Retrieve items by time periods

# lwrecord -f storagedb -d <unixtime> -t <type> <key> <data>
# Types:
# array
# log

# array means the data gets pushed onto the array
# log means the data is simply logged

# key spec:
# foo/bar/baz implies $storage->{foo}->{bar}->{baz} = data ?

# Store login attempts by user:
# lwstore -t array "ssh_attempts/%IP%" "%USER"

my $prog = $0;
$prog =~ s,^.*/,,;


my $opts = {};
# -F == fetch db
# -f == db file
# -d = date
getopts("Ff:d:t:Ns:", $opts);
$opts->{"F"} = 1 if ($prog eq 'lwfetch');

my $key = $ARGV[0];
my $data = $ARGV[1];
my $dbfile = $opts->{"f"} || "happydb";
my $type = $opts->{"t"} || "log";
my $time = $opts->{"d"} || time();

my $db = {};
$db = retrieve($dbfile) if (-r $dbfile);

if ($opts->{"F"}) {
	print Dumper($db);
} else {
	push(@{$db->{$key}}, { time => $time, data => $data});
	lock_store($db, $dbfile)
}

