#!/usr/bin/perl
# (?:Perl|Pretty)i?\sMusic\sPlayer
# or...
# Pimp Is a Music Player
#
# Anyhoo... on with the perl!
# $Id$

use strict;
use warnings;

use Audio::Mad qw(:all);
use Audio::Ao qw(:all);
use File::Glob qw(:glob);
use IO::Socket;
use IO::Select;
use IO::Handle;
use MP3::Tag;
use Socket;
use POSIX;

use constant ERR_DECODE => "-1";

$SIG{INT} = \&do_shutdown;
$SIG{__DIE__} = \&do_shutdown;

my ($serv, $player) = IO::Socket->socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC);
my $BUFSIZE = 65536;

my $pimp = {};

# MP3 Player writes to $server, reads from $player
# Server writes to $server, reads from CHILD

my $spid = fork();
if ($spid == 0) {
	run_server();

	print STDERR "Server died!\n";
	exit(1);
}

my $stream   = new Audio::Mad::Stream();
my $frame    = new Audio::Mad::Frame();
my $synth    = new Audio::Mad::Synth();
my $timer    = new Audio::Mad::Timer();
my $resample = new Audio::Mad::Resample(44100, 22050);
my $dither   = new Audio::Mad::Dither();

my @playlist;
read_playlist();
next_song();

initialize_ao;
my $device = open_live(default_driver_id(), 16, 44100, 2, is_big_endian(), {});
die ("Unable to open sound device.\n") unless defined($device);
$pimp->{"sound_state"} = 1;

my $select = IO::Select->new($player);

my $buffer = ""; # IPC buffer
$pimp->{"state"} = "playing";

while (1) {
	foreach my $socket ($select->can_read(.01)) {
		my $data;
		my $recv = $socket->recv($data, POSIX::BUFSIZ, 0);
		$buffer .= $data;

		unless (defined($recv) && length($data)) {
			die("Connection to server was lost!? - $!\n");
		}

		while ($buffer =~ s/(.*\n)//) {
			handle_command($1);
		}
	}

	play_loop();
}

close_ao($device);
shutdown_ao;
do_shutdown("INT");

sub signal_event {
	my $event = shift;

	if ($event eq 'end_of_song') {
		stop_song();
		next_song();
	} elsif ($event eq 'new_song') {
		print $player "BROADCAST " . display_song($pimp->{"current_song"}) . "\n";
	}

}

sub play_loop {
	# Audio Stuff
	if ($pimp->{"state"} eq "playing") {
		if ($pimp->{"sound_state"} == 0) {
			$device = open_live(default_driver_id(), 16, 44100, 2, is_big_endian(), {});
			$pimp->{"sound_state"} = 1;
		}
		my $pcm;
		if ($pimp->{"current_type"} eq "mp3") {
			$pcm = decode_current_mp3();
			if (defined($pcm) && $pcm ne '') {
				play($device, $pcm, length($pcm));
			} elsif ($pcm ne ERR_DECODE) {
				# End of song or something broke.
				next_song();
			}
		}
	}
}

sub decode_current_mp3 {
	if ($frame->decode($stream) == -1) {

		if ($stream->error() == MAD_ERROR_BUFLEN || 
			 $stream->error == MAD_ERROR_BUFPTR) {
			#print STDERR "Reading new chunk at " . $stream->next_frame() . "\n";
			my $buffer = substr($pimp->{"current_buffer"}, $stream->next_frame());
			return if (sysread($pimp->{"current_fd"}, $buffer, $BUFSIZE - length($buffer), length($buffer)) == 0);

			$stream->buffer($buffer);
			$pimp->{"current_buffer"} = $buffer;
			return ERR_DECODE;
		} else {
			warn "decoding error: " . $stream->error();
			#print $player "BROADCAST Error in decoding of " . $pimp->{"current_song"}->{"file"} . "\n";
			return ERR_DECODE;
		}

		unless ($stream->err_ok()) {
			$pimp->{"state"} = "stopped";
			signal_event("end_of_song");
			return '';
		}
	}
	$synth->synth($frame);
	#my $pcm = $dither->dither($resample->resample($synth->samples()));
	return $dither->dither($synth->samples());
}

sub handle_command {
	my $line = shift;
	my ($who, $cmd, $args) = split(/\s+/,$line,3);
	print "Command: $cmd FROM $who\n";
	$cmd = lc($cmd);

	if ($cmd eq 'pause') {
		$pimp->{"state"} = ($pimp->{"state"} eq "pause") ? "playing" : "pause";
		print $player "$who OK!\n";
	} elsif ($cmd eq 'play') {
		play_song($pimp->{"current_song"}->{"file"})
			if ($pimp->{"state"} =~ m/(?:playing|stop)/);
		$pimp->{"state"} = "playing";

	} elsif ($cmd eq 'stop') {
		$pimp->{"state"} = 'stop';
		
		# Shutdown sound
		if (close_ao($device)) {
			$pimp->{"sound_state"} = 0;
		} else {
			print STDERR "Unable to close sound?!\n";
		}
	} elsif ($cmd eq 'next') {
		next_song();
	} elsif ($cmd eq 'quit') {
		print $player "$who CLOSE\n";
	} elsif ($cmd eq 'info') {
		my $csong = $pimp->{"current_song"};
		print $player "$who " . display_song($csong) . "\n";
	} elsif ($cmd eq 'set') {
		my $file = $pimp->{"current_song"}->{"file"};
		my ($tag,$value) = split(/\s+/,$args,2);
		chomp($value);
		$value =~ s/\r//;
		$tag = lc($tag);
		if ($tag =~ m/(title|track|album|artist)/) {
			my $mp3 = MP3::Tag->new($file);
			$mp3->get_tags();
			my $id3 = $mp3->{ID3v1} || $mp3->new_tag("ID3v1");
			print $player "$who Setting $tag to '$value'\n";
			if ($tag eq 'title') {
				$id3->song($value);
			} elsif ($tag eq 'album') {
				$id3->album($value);
			} elsif ($tag eq 'artist') {
				$id3->artist($value);
			} elsif ($tag eq 'track') {
				$id3->track($value);
			} else {
				print $player "$who Invalid tag name, '$tag'\n";
				return;
			}
			$mp3->{ID3v1}->write_tag();
			my ($song, $track, $artist, $album) = $mp3->autoinfo();
			$pimp->{"playlist"}->{$file} = { title => $song, artist => $artist, 
														track => $track, album => $album,
														file => $file };
			$pimp->{"current_song"} = $pimp->{"playlist"}->{$file};
			$mp3->close();
		} else {
			print $player "$who Invalid tag name, '$tag'\n";
		}

	}
}

sub display_song {
	# ($album) $artist - $title
	my $foo = shift;
	return sprintf("(%s) %s - %s", $foo->{"album"}, $foo->{"artist"}, 
						                $foo->{"title"});
}

sub stop_song {
	if ($pimp->{"current_type"} eq "mp3") {
		close($pimp->{"current_fd"}) or warn("Failed closing fd: $!");;
	}
}

sub next_song {
	# Find next song to play
	# Then play it

	#my @songs;
	#@songs = bsd_glob("/usr/home/psionic/download/mp3/*/*/*");

	# Foo.
	my $newsong = $playlist[ (int(rand() * scalar(@playlist))) ];
	print STDERR "New song: $newsong\n";

	play_song($newsong);
}

sub play_song {
	my $file = $_[0];
	if ($file =~ m/\.mp3$/) {
		local $/ = undef;
		open(MP3, $file) or signal_event("open_fail", $_[0]) and return;
		unless (sysread(MP3, $buffer, $BUFSIZE, 0)) {
			warn("Failed reading from $file\n");
			next_song();
		}
		print "BUFFER LENGTH: " . length($buffer) . "\n";
		#close(MP3);
		$stream->buffer($buffer);

		$pimp->{"current_buffer"} = $buffer;
		$pimp->{"current_fd"} = \*MP3;
		$pimp->{"current_type"} = "mp3";

		my $mp3 = MP3::Tag->new($file);
		my ($song, $track, $artist, $album) = $mp3->autoinfo();
		$pimp->{"playlist"}->{$file} = { title => $song, artist => $artist, 
		                                 track => $track, album => $album,
	                                    file => $file };
		$pimp->{"current_song"} = $pimp->{"playlist"}->{$file};
		$mp3->close();

	}
	$pimp->{"state"} ||= "playing";
	$pimp->{"state"} = "playing" if ($pimp->{"state"} eq "pause");
	signal_event("new_song");
}

###
# SERVER STUFF

sub run_server {
	close(STDIN);
	my (%ready, %buffers);

	my $select = IO::Select->new();
	my $server = IO::Socket::INET->new( Proto => "tcp",
													LocalPort => "3242",
													Listen => SOMAXCONN,
													Reuse => 1);
	$select->add($server);
	$select->add($serv);
	#nonblock($server);

	my $clients = {};
	$clients->{"$serv"} = $serv;

	while (1) {
		my $socket;

		foreach $socket ($select->can_read(1)) {
			if ($socket == $server) {  # Incomming Clients
				my $client = $server->accept();
				$select->add($client);
				$clients->{"$client"} = $client;
				#nonblock($client);
			} else {
				if ($socket == $pimp->{"current_fd"}) {
					print "Uh oh\n";
				}

				my $data;
				my $recv = $socket->recv($data, POSIX::BUFSIZ, 0);

				unless (defined($recv) && length($data)) {
					# Client disconnected, clean up.
					drop_client($socket, \%ready, \%buffers, $clients, $select);
					next;
				} 

				$buffers{$socket} .= $data;

				while ($buffers{$socket} =~ s/(.*\n)//) {
					push( @{$ready{$socket}}, $1 );
				}
			}	
		}

		foreach my $client (keys(%ready)) {
			handle($clients, $client, \%ready, \%buffers, $select);
			delete($ready{$client});
		}
	}
}

sub handle {
	my $clients = shift;
	my $client = shift;
	my ($ready, $buffers, $select) = @_;
	my $lines = \@{$ready->{$client}};
	if ($client eq $serv) {
		foreach my $line (@{$lines}) {
			my ($who, $resp) = split(/\s+/,$line,2);
			if ($who eq 'BROADCAST') {
				foreach $client (keys(%{$clients})) {
					next if ($client eq $serv);
					$client = $clients->{$client};
					print $client "$resp";
				}
			} else {
				$client = $clients->{$who};
				if ($resp eq "CLOSE\n") {
					drop_client($client, $ready, $buffers, $clients, $select);
				} else {
					print $client "$resp";
				}
			}
		}
	} else {
		#print "Client: $client ($serv)\n";
		map { print $serv "$client $_" } @{$lines};
	}
}

sub drop_client {
	my $socket = shift;
	my ($ready, $buffers, $clients, $select) = @_;
	delete $ready->{$socket};
	delete $buffers->{$socket};
	delete $clients->{$socket};
	$select->remove($socket);
	close($socket);
}

sub do_shutdown {
	my $error = shift;
	if ($error ne 'INT' ) {
		print STDERR "Fatal Error: $error\n";
	}
	print STDERR "Dying...\n";
	kill("KILL", $spid);
	while ((my $child = waitpid(-1,WNOHANG)) > 0) {
		# meh..
	}
	exit;
}

sub read_playlist {
	open(LIST, "< /home/psionic/foo.m3u");
	while (my $line = <LIST>) {
		next if ($line =~ m/^#/);
		chomp($line);
		push(@playlist,$line) if ($line =~ m/\.mp3$/);
	}
}
