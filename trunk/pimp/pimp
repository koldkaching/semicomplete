#!/usr/bin/perl
# (?:Perl|Pretty)i?\sMusic\sPlayer
# or...
# Pimp Is a Music Player
#
# Anyhoo... on with the perl!
# $Id$

use strict;
use warnings;

use Audio::Ao qw(:all);
use Audio::Mad qw(:all);
use File::Glob qw(:glob);
use IO::Handle;
use IO::Select;
use IO::Socket;
use MP3::Tag;
use POSIX;
use Socket;
use URI;

use constant ERR_DECODE => "1";
use constant ERR_EOF => "2";

$SIG{INT} = \&do_shutdown;
$SIG{__DIE__} = \&do_shutdown;

my ($serv, $player) = IO::Socket->socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC);
my $BUFSIZE = 16384;
my $MAXBUFSIZE = 65536;

my $pimp = { };

# MP3 Player writes to $server, reads from $player
# Server writes to $player, reads from $server

my $spid = fork();
if ($spid == 0) {
	run_server();
	die("Server died!\n");
}

my $stream   = new Audio::Mad::Stream();
my $frame    = new Audio::Mad::Frame();
my $synth    = new Audio::Mad::Synth();
my $timer    = new Audio::Mad::Timer();
my $resample = new Audio::Mad::Resample(44100, 44100);
my $dither   = new Audio::Mad::Dither();

my @playlist;
read_playlist();
next_song();

initialize_ao;
my $device = open_live(default_driver_id(), 16, 44100, 2, is_big_endian(), {});
die ("Unable to open sound device.\n") unless defined($device);
$pimp->{"sound_device"} = $device;
$pimp->{"sound_state"} = 1;

my $select = IO::Select->new($player);

#my $buffer = ""; # IPC buffer
$pimp->{"state"} = "playing";

while (1) {
	foreach my $socket ($select->can_read(.01)) {
		my $data;
		my $recv = $socket->recv($data, POSIX::BUFSIZ, 0);
		$pimp->{"server_buffer"} .= $data;

		unless (defined($recv) && length($data)) {
			die("Connection to server was lost!? - $!\n");
		}

		while ($pimp->{"server_buffer"} =~ s/(.*\n)//) {
			handle_command($1);
		}
	}

	play_loop();

	handle_one_event();
}

# Subs!

sub signal_event {
	push(@{$pimp->{"event_queue"}}, { event => shift, data => shift });
}

sub handle_one_event {
	my $e = shift(@{$pimp->{"event_queue"}});
	return if (!defined($e));

	my ($event, $data);
	$event = $e->{"event"};
	$data = $e->{"data"};

	print "EVENT: $event\n";

	if ($event eq 'end_of_song') {
		stop_song();
		next_song();
	} elsif ($event eq 'new_song') {
		print $player "BROADCAST " . display_song($pimp->{"current_song"}) . "\n";
	} elsif ($event eq 'client_next_song') {
		stop_song();
		next_song();
	} elsif ($event eq 'client_pause') {
		$pimp->{"state"} = ($pimp->{"state"} eq "pause") ? "playing" : "pause";
		print $player "BROADCAST " . $pimp->{"state"} . "\n";
	} elsif ($event eq 'open_fail') {
		print $player "BROADCAST Failed trying to read file...\n";
		stop_song();
		next_song();
	}

}

sub play_loop {
	# Audio Stuff
	if ($pimp->{"state"} eq "playing") {
		if ($pimp->{"sound_state"} == 0) {
			$device = open_live(default_driver_id(), 16, 44100, 2, is_big_endian(), {});
			die ("Unable to open sound device.\n") unless defined($device);
			$pimp->{"sound_state"} = 1;
		}
		my $pcm;
		if ($pimp->{"current_type"} eq "mp3") {
			$pcm = decode_current_mp3();
			if ($pcm eq ERR_EOF) {
				signal_event("end_of_song");
			} elsif (defined($pcm) && $pcm ne '') {
				play($device, $pcm, length($pcm));
			} elsif ($pcm ne ERR_DECODE) {
				# End of song or something broke. (Non-decoding error)
				signal_event("end_of_song");
				$pimp->{"state"} = "stopped";
			}
		}
	}
}

# Decode a frame of our happy MP3
sub decode_current_mp3 {
	if (length($pimp->{"current_buffer"}) < $MAXBUFSIZE) {
		sysread($pimp->{"current_fd"}, $pimp->{"current_buffer"}, 
				  $MAXBUFSIZE - length($pimp->{"current_buffer"}),
				  length($pimp->{"current_buffer"}));
	}
	while ($frame->decode($stream) == -1) {
		# If there's a buffer-related error, then we need to read more from 
		if ($stream->error() == MAD_ERROR_BUFLEN || 
			 $stream->error == MAD_ERROR_BUFPTR) {
			my $buffer = substr($pimp->{"current_buffer"}, $stream->next_frame());
			sysread($pimp->{"current_fd"}, $buffer, $BUFSIZE, length($buffer)) or print "END OF FILE\n" and return ERR_EOF;

			$stream->buffer($buffer);
			$pimp->{"current_buffer"} = $buffer;

			# This breaks the music :-(
			#return ERR_DECODE;
		} else {
			return ERR_EOF unless ($stream->err_ok());
		}
	}
	$synth->synth($frame);
	return $dither->dither($synth->samples());
}

sub handle_command {
	my $line = shift;
	my ($who, $cmd, $args) = split(/\s+/,$line,3);
	#print "Command: $cmd FROM $who\n";
	$cmd = lc($cmd);

	if ($cmd eq 'pause') {
		signal_event("client_pause", $player);
	} elsif ($cmd eq 'play') {
		# Doesn't block, no need for an event. 
		play_song($pimp->{"current_song"}->{"file"})
			if ($pimp->{"state"} =~ m/(?:playing|stop)/);
		$pimp->{"state"} = "playing";

	} elsif ($cmd eq 'stop') {
		$pimp->{"state"} = 'stop';

		# Shutdown sound
		if (close_ao($device)) {
			$pimp->{"sound_state"} = 0;
		} else {
			print STDERR "Unable to close sound?!\n";
		}
	} elsif ($cmd eq 'next') {
		signal_event("client_next_song");
		#next_song();
	} elsif ($cmd eq 'quit') {
		print $player "$who CLOSE\n";
	} elsif ($cmd eq 'info') {
		my $csong = $pimp->{"current_song"};
		print $player "$who " . display_song($csong) . "\n";
	} elsif ($cmd eq 'set') {
		my $file = $pimp->{"current_song"}->{"file"};
		my ($tag,$value) = split(/\s+/,$args,2);
		chomp($value);
		$value =~ s/\r//;
		$tag = lc($tag);
		if ($tag =~ m/(title|track|album|artist)/) {
			my $mp3 = MP3::Tag->new($file);
			$mp3->get_tags();
			my $id3 = $mp3->{ID3v1} || $mp3->new_tag("ID3v1");
			print $player "$who Setting $tag to '$value'\n";
			if ($tag eq 'title') {
				$id3->song($value);
			} elsif ($tag eq 'album') {
				$id3->album($value);
			} elsif ($tag eq 'artist') {
				$id3->artist($value);
			} elsif ($tag eq 'track') {
				$id3->track($value);
			} else {
				print $player "$who Invalid tag name, '$tag'\n";
				return;
			}
			$mp3->{ID3v1}->write_tag();
			my ($song, $track, $artist, $album) = $mp3->autoinfo();
			$pimp->{"playlist"}->{$file} = { title => $song, artist => $artist, 
				track => $track, album => $album,
				file => $file };
				$pimp->{"current_song"} = $pimp->{"playlist"}->{$file};
				$mp3->close();
		} else {
			print $player "$who Invalid tag name, '$tag'\n";
		}

	}
}

sub display_song {
	# ($album) $artist - $title
	my $foo = shift;

	if ($pimp->{"current_is_stream"}) {

	} else {
		$0 = "PiMP: ";
		$0 .= sprintf("(%s) %s - %s", $foo->{"album"}, $foo->{"artist"}, 
						  $foo->{"title"});
	}
}

sub stop_song {
	if ($pimp->{"current_type"} eq "mp3") {
		close($pimp->{"current_fd"}) or warn("Failed closing fd: $!");;
	}
}

sub next_song {
	# Find next song to play
	# Then play it

	#my @songs;
	#@songs = bsd_glob("/usr/home/psionic/download/mp3/*/*/*");

	# Foo.
	my $newsong = $playlist[ (int(rand() * scalar(@playlist))) ];
	print STDERR "New song: $newsong\n";

	play_song($newsong);
}

sub play_song {
	my $file = shift;
	#if ($file =~ m/\.mp3$/) {
		#local $/ = undef;
		my $buffer = '';

		# Support for HTTP streams

		my $fd;

		if ($file =~ m!^http:\/\/!) {
			print "HTTP!\n";
			CONNECT:
			my $uri = URI->new($file);
			my $port = $uri->port();

			socket($fd, PF_INET, SOCK_STREAM, getprotobyname('tcp')) or 
				signal_event("socket_fail", $file) and return;
			connect($fd, sockaddr_in($port, inet_aton($uri->host()))) or
				signal_event("connect_fail", $file) and return;

			$fd->autoflush(1);

			print $fd "GET " . $uri->path() . " HTTP/1.0\n";
			print $fd "Host: " . $uri->host() . "\n";
			print $fd "\n";
			$pimp->{"current_is_stream"} = 1;

			# Slurp the headers...
			my $resp = <$fd>;
			my %headers;
			$resp =~ s/\s+$//;
			while (<$fd>) {
				chomp();
				s/
//;
				last if (m/^\s*$/);
				m/(\S+):\s*(.+)\s*/;
				$headers{$1} = $2;
			}

			map { print "$_: " . $headers{$_} . "\n" } keys(%headers);

			# Icecast servers like to do redirects... feh :(
			if ($resp =~ m/^\S+\s+302/) {
				$file = $headers{"Location"};
				goto CONNECT;
			}

		} elsif ($file =~ m/\.mp3$/) {
			open($fd, $file) or signal_event("open_fail", $file);
			$pimp->{"current_is_stream"} = 0;
		} else {
			signal_event("open_fail", $file);
		}

		$pimp->{"current_type"} = "mp3";

		# Prebuffer stage
		STDOUT->autoflush(1);
		print "Prebuffering... \n";
		while (length($buffer) < $MAXBUFSIZE) {
			unless (sysread($fd, $buffer, $BUFSIZE, length($buffer))) {
				signal_event("read_fail", $file);
				warn("Failed in prebuffer stage for $file\n");
				return;
			}
		}
		print "Done!\n";
		$pimp->{"current_fd"} = $fd;
		$stream->buffer($buffer);
		$pimp->{"current_buffer"} = $buffer;

		if (! $pimp->{"current_is_stream"}) {
			my $mp3 = MP3::Tag->new($file);
			my ($song, $track, $artist, $album) = $mp3->autoinfo();
			$pimp->{"playlist"}->{$file} = { title => $song, artist => $artist, 
				track => $track, album => $album,
				file => $file };
				$pimp->{"current_song"} = $pimp->{"playlist"}->{$file};
				$mp3->close();
		} else {
			$pimp->{"playlist"}->{$file} = { file => $file };
			$pimp->{"current_song"} = $pimp->{"playlist"}->{$file};
		}

		$pimp->{"state"} ||= "playing";
		$pimp->{"state"} = "playing" if ($pimp->{"state"} eq "pause");
		signal_event("new_song");
	#}
}

###
# SERVER STUFF

sub run_server {
	close(STDIN);
	my (%ready, %buffers);

	my $select = IO::Select->new();
	my $server = IO::Socket::INET->new( Proto => "tcp",
													LocalPort => "3242",
													Listen => SOMAXCONN,
													Reuse => 1);
	$select->add($server);
	$select->add($serv);
	#nonblock($server);

	my $clients = {};
	$clients->{"$serv"} = $serv;

	while (1) {
		my $socket;

		foreach $socket ($select->can_read(1)) {
			if ($socket == $server) {  # Incomming Clients
				my $client = $server->accept();
				$select->add($client);
				$clients->{"$client"} = $client;
				#nonblock($client);
			} else {
				my $data;
				my $recv = $socket->recv($data, POSIX::BUFSIZ, 0);

				unless (defined($recv) && length($data)) {
					# Client disconnected, clean up.
					drop_client($socket, \%ready, \%buffers, $clients, $select);
					next;
				} 

				$buffers{$socket} .= $data;

				while ($buffers{$socket} =~ s/(.*\n)//) {
					push( @{$ready{$socket}}, $1 );
			}
			}	
		}

		foreach my $client (keys(%ready)) {
			handle($clients, $client, \%ready, \%buffers, $select);
			delete($ready{$client});
		}
	}
}

sub handle {
	my $clients = shift;
	my $client = shift;
	my ($ready, $buffers, $select) = @_;
	my $lines = \@{$ready->{$client}};
	if ($client eq $serv) {
		foreach my $line (@{$lines}) {
			my ($who, $resp) = split(/\s+/,$line,2);
			if ($who eq 'BROADCAST') {
				foreach $client (keys(%{$clients})) {
					next if ($client eq $serv);
					$client = $clients->{$client};
					print $client "$resp";
				}
			} else {
				$client = $clients->{$who};
				if ($resp eq "CLOSE\n") {
					drop_client($client, $ready, $buffers, $clients, $select);
				} else {
					print $client "$resp";
				}
			}
		}
	} else {
		map { print $serv "$client $_" } @{$lines};
	}
}

sub drop_client {
	my $socket = shift;
	my ($ready, $buffers, $clients, $select) = @_;
	delete $ready->{$socket};
	delete $buffers->{$socket};
	delete $clients->{$socket};
	$select->remove($socket);
	close($socket);
}

sub do_shutdown {
	my $error = shift;
	if ($error ne 'INT' ) {
		print STDERR "Fatal Error: $error\n";
	}
	close_ao($pimp->{"sound_device"});
	shutdown_ao;
	print STDERR "Dying...\n";
	kill("KILL", $spid);
	while ((my $child = waitpid(-1,WNOHANG)) > 0) {
		# meh..
	}
	exit;
}

sub read_playlist {
	open(LIST, "< /home/psionic/foo.m3u");
	while (my $line = <LIST>) {
		next if ($line =~ m/^#/);
		chomp($line);
		push(@playlist,$line);# if ($line =~ m/\.mp3$/);
	}
}
