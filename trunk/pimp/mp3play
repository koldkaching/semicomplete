#!/usr/bin/perl

use strict;
use warnings;

use Audio::Mad qw(:all);
use Audio::Ao qw(:all);
use IO::Socket;
use IO::Select;
use IO::Handle;
use Socket;
use Fcntl;
use POSIX;

$SIG{INT} = \&shutdown;
$SIG{__DIE__} = \&shutdown;

my ($server, $player) = IO::Socket->socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC);

# MP3 Player writes to $server, reads from $player
# Server writes to $server, reads from CHILD

my $spid = fork();
if ($spid == 0) {
	run_server();
	
	print STDERR "Server died!\n";
	exit(1);
}

my $stream   = new Audio::Mad::Stream();
my $frame    = new Audio::Mad::Frame();
my $synth    = new Audio::Mad::Synth();
my $timer    = new Audio::Mad::Timer();
my $resample = new Audio::Mad::Resample(44100, 22050);
my $dither   = new Audio::Mad::Dither();

{
	local $/ = undef;
	open(MP3, $ARGV[0]);
	my $buffer = <MP3>;
	close(MP3);
	$stream->buffer($buffer);
}

#print Dumper($stream->options());

initialize_ao;
my $device = open_live(default_driver_id(), 16, 22050, 2, is_big_endian(), {});

my $select = IO::Select->new($player);

my $buffer = ""; # IPC buffer
my $state = "playing"; # Player State
while (1) {
	foreach my $socket ($select->can_read(.01)) {
		my $data;
		my $recv = $socket->recv($data, POSIX::BUFSIZ, 0);
		$buffer .= $data;

		unless (defined($recv) && length($data)) {
			die("Connection to server was lost!? - $!\n");
		}

		while ($buffer =~ s/(.*\n)//) {
			handle_command($1);
		}
	}

	# Audio Stuff
	if ($state eq "playing") {
		if ($frame->decode($stream) == -1) {
			print "Done\n";
			last unless ($stream->err_ok());

			warn "decoding error: " . $stream->error();
			next;
		}

		$synth->synth($frame);
		my $pcm = $dither->dither($resample->resample($synth->samples()));

		play($device, $pcm, length($pcm));
		#print $pcm;
	}
}

close_ao($device);
shutdown_ao;

sub handle_command {
	my $line = shift;
	my ($who, $cmd, $args) = split(/\s+/,$line,3);
	print "Command: $cmd FROM $who\n";
	$cmd = lc($cmd);

	if ($cmd eq 'pause') {
		$state = ($state eq "pause") ? "playing" : "pause";
	}
}


# SERVER STUFF

sub run_server {
	close(STDIN);
	my (%ready, %buffers);

	my $select = IO::Select->new();
	my $server = IO::Socket::INET->new( Proto => "tcp",
										  LocalPort => "3242",
										  Listen => SOMAXCONN,
										  Reuse => 1);
	$select->add($server);
	#nonblock($server);

	my $clients = {};
	while (1) {
		my $socket;

		foreach $socket ($select->can_read(1)) {
			if ($socket == $server) {
				my $client = $server->accept();
				$select->add($client);
				$clients->{"$client"} = $client;
				#nonblock($client);
			} else {
				my $data;
				my $recv = $socket->recv($data, POSIX::BUFSIZ, 0);

				unless (defined($recv) && length($data)) {
					# Client disconnected, clean up.
					delete $ready{$socket};
					delete $buffers{$socket};
					$select->remove($socket);
					close($socket);
					next;
				} 

				$buffers{$socket} .= $data;

				while ($buffers{$socket} =~ s/(.*\n)//) {
					push( @{$ready{$socket}}, $1 );
				}
			}	
		}

		foreach my $client (keys(%ready)) {
			handle($client, \@{$ready{$client}});
			delete($ready{$client});
		}
	}
}

sub handle {
	my $client = shift;
	my $lines = shift;
	#print "Client: $client\n";
	map { print $server "$client $_" } @{$lines};
}

sub nonblock {
	my $socket = shift;
	my $flags;

	$flags = fcntl($socket, F_GETFL, 0)
		or die "Can't get flags for socket: $!\n";
	fcntl($socket, F_SETFL, $flags | O_NONBLOCK)
		or die "Can't make socket nonblocking: $!\n";
}

sub shutdown {
	print STDERR "Dying...\n";
	kill("KILL", $spid);
	while ((my $child = waitpid(-1,WNOHANG)) > 0) {
		# foo? meh :(
	}
	exit;
}
