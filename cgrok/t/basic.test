#include <cxxtest/TestSuite.h>

#include <grokregex.hpp>
#include <grokmatch.hpp>

#include <sstream>

class GrokTestSuite : public CxxTest::TestSuite {
  public:
    void testSearchWithPlainString() {
      string input = "hello";
      GrokRegex<sregex> gre(input);
      GrokMatch<sregex> *gm = NULL;
      GrokMatch<sregex>::match_map_type m;

      gm = gre.Search(input);
      TS_ASSERT(gm != NULL);

      m = gm->GetMatches();
      TS_ASSERT(m["=MATCH"] == input);

      delete gm;
    }

    void testSearchWithPatternString() {
      string input = "hello";
      string regex = "%GREETING%";
      GrokRegex<sregex> gre(regex);
      GrokMatch<sregex> *gm = NULL;
      GrokMatch<sregex>::match_map_type m;
      
      GrokPatternSet<sregex> pset;
      pset.AddPattern("GREETING", "hello");

      /* We should fail matching before we add the pattern set */
      gm = gre.Search(input);
      TS_ASSERT(gm == NULL);

      gre.AddPatternSet(pset);
      gm = gre.Search(input);
      TS_ASSERT(gm != NULL);

      m = gm->GetMatches();
      TS_ASSERT(m["=MATCH"] == input);
      TS_ASSERT(m["GREETING"] == input);

      delete gm;
    }

    void _testSearchIntPredicate(int start_num, int end_num, string predicate, bool should_succeed) {
      string regex = "%INT>30%";
      stringstream ss(stringstream::out | stringstream::in);
      GrokRegex<sregex> gre(regex);
      GrokMatch<sregex> *gm = NULL;
      GrokMatch<sregex>::match_map_type m;
      
      GrokPatternSet<sregex> pset;
      pset.AddPattern("INT", "[0-9]+");
      gre.AddPatternSet(pset);

      for (int i = start_num; i < end_num; i++) {
        ss << i << endl;
      }

      string data;
      while (getline(ss, data)) {
        gm = gre.Search(data);
        if (should_succed) {
          TS_ASSERT(gm != NULL);
        } else {
          TS_ASSERT(gm == NULL);
        }
      }

    }

    void testSearchLessthanPredicateSuccessIfLessThan() {
      this->_testSearchIntPredicate(31, 50, ">30", true);
      this->_testSearchIntPredicate(-10, -1, ">-30", true);
    }

    void testSearchLessthanPredicateFailIfNotLessThan() {
      this->_testSearchIntPredicate(0, 29, ">30", false);
      this->_testSearchIntPredicate(-10, -1, ">30", false);
    }
};
